plugins {
    id 'java'
    id 'war'
    id 'checkstyle'
}
plugins {
    id("org.flywaydb.flyway") version "9.6.0"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.add("-parameters")
}




dependencies {
    // Servlet API for provided runtime (optional)
    implementation "jakarta.servlet:jakarta.servlet-api:6.1.0"
    implementation "jakarta.annotation:jakarta.annotation-api:3.0.0"
    implementation "jakarta.validation:jakarta.validation-api:3.0.2"

    implementation "io.swagger.core.v3:swagger-annotations-jakarta:2.2.23"
    implementation("io.swagger.core.v3:swagger-jaxrs2-jakarta:2.2.23")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0")

    // Spring dependencies
    implementation "org.springframework:spring-core:6.0.8"
    implementation "org.springframework:spring-beans:6.0.8"
    implementation "org.springframework:spring-context:6.0.8"
    implementation "org.springframework:spring-webmvc:6.0.8"
    implementation "org.springframework:spring-jdbc:6.0.8"
    implementation "org.springframework:spring-tx:6.0.8"
    implementation "org.springframework:spring-orm:6.0.8"
    implementation"org.springframework.data:spring-data-jpa:3.0.8"
    implementation "org.springframework.data:spring-data-rest-webmvc:3.7.0"


    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    // Hibernate dependencies
    implementation "org.hibernate:hibernate-core:6.1.7.Final"
    implementation "jakarta.persistence:jakarta.persistence-api:3.1.0"
    implementation "org.flywaydb:flyway-core:9.6.0"

    // Hibernate Validator
    implementation "org.hibernate.validator:hibernate-validator:8.0.0.Final"

    // PostgreSQL Driver
    runtimeOnly "org.postgresql:postgresql:42.6.0"

    // SLF4J for logging
    implementation "org.slf4j:slf4j-api:2.0.0"
    runtimeOnly "org.slf4j:slf4j-simple:2.0.0"

    // ModelMapper for object mapping
    implementation "org.modelmapper:modelmapper:3.2.0"

    // Lombok for reducing boilerplate code
    compileOnly "org.projectlombok:lombok:1.18.30"
    annotationProcessor "org.projectlombok:lombok:1.18.30"

    // Jackson for JSON processing
    implementation "com.fasterxml.jackson.core:jackson-databind:2.15.0"

    // Jakarta Annotation API

    // Testing dependencies
    testImplementation "org.mockito:mockito-core:5.5.0"
    testImplementation "org.mockito:mockito-junit-jupiter:5.5.0"
    testImplementation "org.assertj:assertj-core:3.21.0"
    testImplementation "com.h2database:h2:2.1.214"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

tasks.test {
    useJUnitPlatform()
}
tasks.named('flywayMigrate') {
    dependsOn 'clean'
}

checkstyle {
    ignoreFailures = true
    maxWarnings = 0
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
}